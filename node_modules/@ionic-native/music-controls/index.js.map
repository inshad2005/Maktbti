{"version":3,"sources":["../../../src/@ionic-native/plugins/music-controls/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAAA,OAAO,EAAE,UAAA,EAAW,MAAO,eAAA,CAAgB;AAC3C,OAAO,EAAE,MAAA,EAAQ,OAAA,EAAS,iBAAA,EAAkB,MAAO,oBAAA,CAAqB;AACxE,OAAO,EAAE,UAAA,EAAW,MAAO,iBAAA,CAAkB;AAiB7C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAiGG;AASH,IAAa,aAAa;IAAS,iCAAiB;IAApD;;IA4DA,CAAC;IA1DC;;;;OAIG;IAEH,8BAAM,GAAN,UAAO,OAA6B,IAAkB,MAAM,CAAC,CAAC,CAAC;IAE/D;;;OAGG;IAEH,+BAAO,GAAP,cAA0B,MAAM,CAAC,CAAC,CAAC;IAEnC;;;OAGG;IAIH,iCAAS,GAAT,cAA+B,MAAM,CAAC,CAAC,CAAC;IAExC;;OAEG;IAEH,8BAAM,GAAN,cAAiB,CAAC;IAElB;;;OAGG;IAEH,uCAAe,GAAf,UAAgB,SAAkB,IAAU,CAAC;IAE7C;;;MAGE;IAIF,qCAAa,GAAb,UAAc,IAA8C,IAAU,CAAC;IAEvE;;;OAGG;IAEH,yCAAiB,GAAjB,UAAkB,WAAoB,IAAU,CAAC;IAOnD,oBAAC;AAAD,CA5DA,AA4DC,CA5DkC,iBAAiB,GA4DnD;AANM,wBAAU,GAA0B;IAC3C,EAAE,IAAI,EAAE,UAAU,EAAE;CACnB,CAAC;AACF,kBAAkB;AACX,4BAAc,GAAmE,cAAM,OAAA,EAC7F,EAD6F,CAC7F,CAAC;AAnDA;IADC,OAAO,EAAE;;;;2CACqD;AAO/D;IADC,OAAO,EAAE;;;;4CACyB;AASnC;IAHC,OAAO,CAAC;QACP,UAAU,EAAE,IAAI;KACjB,CAAC;;;oCACW,UAAU;8CAAiB;AAMxC;IADC,OAAO,CAAC,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC;;;;2CACN;AAOlB;IADC,OAAO,EAAE;;;;oDACmC;AAS7C;IAHC,OAAO,CAAC;QACP,SAAS,EAAE,CAAC,KAAK,CAAC;KACnB,CAAC;;;;kDACqE;AAOvE;IADC,OAAO,EAAE;;;;sDACuC;AArDtC,aAAa;IARzB,MAAM,CAAC;QACN,UAAU,EAAE,eAAe;QAC3B,MAAM,EAAE,+BAA+B;QACvC,SAAS,EAAE,eAAe;QAC1B,IAAI,EAAE,4DAA4D;QAClE,SAAS,EAAE,CAAC,SAAS,EAAE,KAAK,EAAE,SAAS,CAAC;KACzC,CAAC;GAEW,aAAa,CA4DzB;SA5DY,aAAa","file":"index.js","sourceRoot":"","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Plugin, Cordova, IonicNativePlugin } from '@ionic-native/core';\nimport { Observable } from 'rxjs/Observable';\n\nexport interface MusicControlsOptions {\n  track: string;\n  artist: string;\n  cover: string;\n  isPlaying: boolean;\n  dismissable: boolean;\n  hasPrev: boolean;\n  hasNext: boolean;\n  hasClose: boolean;\n  album: string;\n  duration: number;\n  elapsed: number;\n  ticker: string;\n}\n\n/**\n * @name Music Controls\n * @description\n * Music controls for Cordova applications.\n * Display a 'media' notification with play/pause, previous, next buttons, allowing the user to control the play.\n * Handle also headset event (plug, unplug, headset button).\n *\n * @usage\n * ```typescript\n * import { MusicControls } from '@ionic-native/music-controls';\n *\n * constructor(private musicControls: MusicControls) { }\n *\n * ...\n *\n * this.musicControls.create({\n *   track       : 'Time is Running Out',        // optional, default : ''\n *   artist      : 'Muse',                       // optional, default : ''\n *   cover       : 'albums/absolution.jpg',      // optional, default : nothing\n *   // cover can be a local path (use fullpath 'file:///storage/emulated/...', or only 'my_image.jpg' if my_image.jpg is in the www folder of your app)\n *   //           or a remote url ('http://...', 'https://...', 'ftp://...')\n *   isPlaying   : true,                         // optional, default : true\n *   dismissable : true,                         // optional, default : false\n *\n *   // hide previous/next/close buttons:\n *   hasPrev   : false,      // show previous button, optional, default: true\n *   hasNext   : false,      // show next button, optional, default: true\n *   hasClose  : true,       // show close button, optional, default: false\n *\n * // iOS only, optional\n *   album       : 'Absolution'     // optional, default: ''\n *   duration : 60, // optional, default: 0\n *   elapsed : 10, // optional, default: 0\n *\n *   // Android only, optional\n *   // text displayed in the status bar when the notification (and the ticker) are updated\n *   ticker    : 'Now playing \"Time is Running Out\"'\n *  });\n *\n *  this.musicControls.subscribe().subscribe(action => {\n *\n *    function events(action) {\n *      const message = JSON.parse(action).message;\n *      \tswitch(message) {\n *      \t\tcase 'music-controls-next':\n *      \t\t\t// Do something\n *      \t\t\tbreak;\n *      \t\tcase 'music-controls-previous':\n *      \t\t\t// Do something\n *      \t\t\tbreak;\n *      \t\tcase 'music-controls-pause':\n *      \t\t\t// Do something\n *      \t\t\tbreak;\n *      \t\tcase 'music-controls-play':\n *      \t\t\t// Do something\n *      \t\t\tbreak;\n *      \t\tcase 'music-controls-destroy':\n *      \t\t\t// Do something\n *      \t\t\tbreak;\n *\n *          // External controls (iOS only)\n *          case 'music-controls-toggle-play-pause' :\n *      \t\t\t// Do something\n *      \t\t\tbreak;\n *          case 'music-controls-seek-to':\n *            const seekToInSeconds = JSON.parse(action).position;\n *            MusicControls.updateElapsed({\n *              elapsed: seekToInSeconds,\n *              isPlaying: true\n *            });\n *            // Do something\n *            break;\n *\n *      \t\t// Headset events (Android only)\n *      \t\t// All media button events are listed below\n *      \t\tcase 'music-controls-media-button' :\n *      \t\t\t// Do something\n *      \t\t\tbreak;\n *      \t\tcase 'music-controls-headset-unplugged':\n *      \t\t\t// Do something\n *      \t\t\tbreak;\n *      \t\tcase 'music-controls-headset-plugged':\n *      \t\t\t// Do something\n *      \t\t\tbreak;\n *      \t\tdefault:\n *      \t\t\tbreak;\n *      \t}\n *      }\n *\n *  this.musicControls.listen(); // activates the observable above\n *\n *  this.musicControls.updateIsPlaying(true);\n *\n *\n * ```\n * @interfaces\n * MusicControlsOptions\n */\n@Plugin({\n  pluginName: 'MusicControls',\n  plugin: 'cordova-plugin-music-controls',\n  pluginRef: 'MusicControls',\n  repo: 'https://github.com/homerours/cordova-music-controls-plugin',\n  platforms: ['Android', 'iOS', 'Windows']\n})\n\nexport class MusicControls extends IonicNativePlugin {\n\n  /**\n   * Create the media controls\n   * @param options {MusicControlsOptions}\n   * @returns {Promise<any>}\n   */\n  @Cordova()\n  create(options: MusicControlsOptions): Promise<any> { return; }\n\n  /**\n   * Destroy the media controller\n   * @returns {Promise<any>}\n   */\n  @Cordova()\n  destroy(): Promise<any> { return; }\n\n  /**\n   * Subscribe to the events of the media controller\n   * @returns {Observable<any>}\n   */\n  @Cordova({\n    observable: true\n  })\n  subscribe(): Observable<any> { return; }\n\n  /**\n   * Start listening for events, this enables the Observable from the subscribe method\n   */\n  @Cordova({ sync: true })\n  listen(): void { }\n\n  /**\n   * Toggle play/pause:\n   * @param isPlaying {boolean}\n   */\n  @Cordova()\n  updateIsPlaying(isPlaying: boolean): void { }\n\n  /**\n  * Update elapsed time, optionally toggle play/pause:\n  * @param args {Object} \n  */\n  @Cordova({\n    platforms: ['iOS']\n  })\n  updateElapsed(args: { elapsed: string; isPlaying: boolean; }): void { }\n\n  /**\n   * Toggle dismissable:\n   * @param dismissable {boolean}\n   */\n  @Cordova()\n  updateDismissable(dismissable: boolean): void { }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}