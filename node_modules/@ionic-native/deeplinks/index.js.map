{"version":3,"sources":["../../../src/@ionic-native/plugins/deeplinks/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAAA,OAAO,EAAE,UAAA,EAAW,MAAO,eAAA,CAAgB;AAC3C,OAAO,EAAE,OAAA,EAAS,MAAA,EAAQ,iBAAA,EAAkB,MAAO,oBAAA,CAAqB;AACxE,OAAO,EAAE,UAAA,EAAW,MAAO,iBAAA,CAAkB;AAuB7C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAiDG;AAWH,IAAa,SAAS;IAAS,6BAAiB;IAAhD;;IAgDA,CAAC;IA9CC;;;;;;;;;OASG;IAIH,yBAAK,GAAL,UAAM,KAAU,IAA+B,MAAM,CAAC,CAAC,CAAC;IAExD;;;;;;;;;;;;;;;;;;;OAmBG;IAIH,0CAAsB,GAAtB,UAAuB,aAAkB,EAAE,KAAU,IAA+B,MAAM,CAAC,CAAC,CAAC;IAQ/F,gBAAC;AAAD,CAhDA,AAgDC,CAhD8B,iBAAiB,GAgD/C;AANM,oBAAU,GAA0B;IAC3C,EAAE,IAAI,EAAE,UAAU,EAAE;CACnB,CAAC;AACF,kBAAkB;AACX,wBAAc,GAAmE,cAAM,OAAA,EAC7F,EAD6F,CAC7F,CAAC;AAhCA;IAHC,OAAO,CAAC;QACP,UAAU,EAAE,IAAI;KACjB,CAAC;;;oCACiB,UAAU;sCAA2B;AAyBxD;IAHC,OAAO,CAAC;QACP,UAAU,EAAE,IAAI;KACjB,CAAC;;;oCACsD,UAAU;uDAA2B;AAxClF,SAAS;IAVrB,MAAM,CAAC;QACN,UAAU,EAAE,WAAW;QACvB,MAAM,EAAE,wBAAwB;QAChC,SAAS,EAAE,eAAe;QAC1B,IAAI,EAAE,sDAAsD;QAC5D,OAAO,EAAE,oLAAoL;QAC7L,gBAAgB,EAAE,CAAC,YAAY,EAAE,iBAAiB,EAAE,eAAe,EAAE,qBAAqB,CAAC;QAC3F,SAAS,EAAE,CAAC,SAAS,EAAE,SAAS,EAAE,KAAK,CAAC;KACzC,CAAC;GAEW,SAAS,CAgDrB;SAhDY,SAAS","file":"index.js","sourceRoot":"","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Cordova, Plugin, IonicNativePlugin } from '@ionic-native/core';\nimport { Observable } from 'rxjs/Observable';\n\nexport interface DeeplinkMatch {\n\n  /**\n   * The route info for the matched route\n   */\n  $route: any;\n\n  /**\n   * Any arguments passed either through route parameters or GET parameters\n   */\n  $args: any;\n\n  /**\n   * The deeplink object processed from the plugin, along with any\n   * any internal native data available as \"extras\" at the time\n   * the route was matched (for example, Facebook sometimes adds extra data)\n   */\n  $link: any;\n\n}\n\n/**\n * @name Deeplinks\n * @description This plugin handles deeplinks on iOS and Android for both custom URL scheme links\n * and Universal App Links.\n *\n * @usage\n * ```typescript\n * import { Deeplinks } from '@ionic-native/deeplinks';\n *\n * constructor(private deeplinks: Deeplinks) { }\n *\n * this.deeplinks.route({\n *      '/about-us': AboutPage,\n *      '/universal-links-test': AboutPage,\n *      '/products/:productId': ProductPage\n *    }).subscribe((match) => {\n *      // match.$route - the route we matched, which is the matched entry from the arguments to route()\n *      // match.$args - the args passed in the link\n *      // match.$link - the full link data\n *      console.log('Successfully matched route', match);\n *    }, (nomatch) => {\n *      // nomatch.$link - the full link data\n *      console.error('Got a deeplink that didn\\'t match', nomatch);\n *    });\n * ```\n *\n * Alternatively, if you're using Ionic, there's a convenience method that takes a reference to a `NavController` and handles\n * the actual navigation for you:\n *\n * ```typescript\n * this.deeplinks.routeWithNavController(this.navController, {\n *   '/about-us': AboutPage,\n *   '/products/:productId': ProductPage\n * }).subscribe((match) => {\n *     // match.$route - the route we matched, which is the matched entry from the arguments to route()\n *     // match.$args - the args passed in the link\n *     // match.$link - the full link data\n *     console.log('Successfully matched route', match);\n *   }, (nomatch) => {\n *     // nomatch.$link - the full link data\n *     console.error('Got a deeplink that didn\\'t match', nomatch);\n *   });\n * ```\n *\n * See the [Ionic Deeplinks Demo](https://github.com/ionic-team/ionic2-deeplinks-demo/blob/master/app/app.ts) for an example of how to\n * retrieve the `NavController` reference at runtime.\n *\n * @interfaces\n * DeeplinkMatch\n */\n@Plugin({\n  pluginName: 'Deeplinks',\n  plugin: 'ionic-plugin-deeplinks',\n  pluginRef: 'IonicDeeplink',\n  repo: 'https://github.com/ionic-team/ionic-plugin-deeplinks',\n  install: 'ionic cordova plugin add ionic-plugin-deeplinks --variable URL_SCHEME=myapp --variable DEEPLINK_SCHEME=https --variable DEEPLINK_HOST=example.com --variable ANDROID_PATH_PREFIX=/',\n  installVariables: ['URL_SCHEME', 'DEEPLINK_SCHEME', 'DEEPLINK_HOST', 'ANDROID_PATH_PREFIX'],\n  platforms: ['Android', 'Browser', 'iOS']\n})\n\nexport class Deeplinks extends IonicNativePlugin {\n\n  /**\n   * Define a set of paths to match against incoming deeplinks.\n   *\n   * @param {paths} paths Define a set of paths to match against incoming deeplinks.\n   * paths takes an object of the form { 'path': data }. If a deeplink\n   * matches the path, the resulting path-data pair will be returned in the\n   * promise result which you can then use to navigate in the app as you see fit.\n   * @returns {Observable<DeeplinkMatch>} Returns an Observable that is called each time a deeplink comes through, and\n   * errors if a deeplink comes through that does not match a given path.\n   */\n  @Cordova({\n    observable: true\n  })\n  route(paths: any): Observable<DeeplinkMatch> { return; }\n\n  /**\n   *\n   * This is a convenience version of `route` that takes a reference to a NavController\n   * from Ionic, or a custom class that conforms to this protocol:\n   *\n   * NavController.push = function(View, Params){}\n   *\n   * This handler will automatically navigate when a route matches. If you need finer-grained\n   * control over the behavior of a matching deeplink, use the plain `route` method.\n   *\n   * @param {Nav} navController Define a set of paths to match against incoming deeplinks.\n   * paths takes an object of the form { 'path': data }. If a deeplink\n   * matches the path, the resulting path-data pair will be returned in the\n   * promise result which you can then use to navigate in the app as you see fit.\n   *\n   * @param {Object} paths\n   *\n   * @returns {Observable<DeeplinkMatch>} Returns an Observable that resolves each time a deeplink comes through, and\n   * errors if a deeplink comes through that does not match a given path.\n   */\n  @Cordova({\n    observable: true\n  })\n  routeWithNavController(navController: any, paths: any): Observable<DeeplinkMatch> { return; }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}